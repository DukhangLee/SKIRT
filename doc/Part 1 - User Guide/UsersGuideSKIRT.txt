/**

\page UsersGuide SKIRT User's Guide

\section UserIntro Introduction

This chapter explains how to run a <tt>SKIRT</tt> simulation and what output to expect.
After a general description of the command line user interface and the <tt>SKIRT</tt> parameter file format, tutorials
walk you through a couple simple simulations step by step, including an overview of the generated output.

More information on a specific <tt>SKIRT</tt> parameter, or on the output file(s) generated by a particular parameter choice,
can be found in the documentation for the C++ class implementing the parameter. As explained in \ref UserSKIEdit,
the class name (and hence the corresponding documentation) is fairly easy to locate even for a non-developer.

\note The instructions in this chapter assume that you have installed <tt>SKIRT</tt> on your computer as explained in
the \ref InstallationGuide, and that you have added <tt>SKIRT</tt> to your \c PATH.


\section UserCmdLine SKIRT Command line user interface

\subsection UserCLIOver Overview

The <tt>SKIRT</tt> code is exposed to the user as a command line application to be executed in a Terminal window.
At this time, there exists no graphical user interface (GUI) for SKIRT.

The options defining a single, complete <tt>SKIRT</tt> simulation are stored in a <tt>SKIRT</tt> parameter file with the
filename extension ".ski". Such a parameter file is customary called "a \em ski file".
The data format of \em ski files allows efficient manipulation by computers, while being sufficiently transparent
for viewing and editing by humans. The \em ski file format is further discussed in \ref UserParamFile.

The <tt>SKIRT</tt> command line application can be invoked in one of two modes (depending on the command line arguments):
 - In interactive mode, <tt>SKIRT</tt> asks the user a series of questions (via console input/output in the Terminal window)
   and, based on the user's responses, constructs and saves a corresponding \em ski file for later use -- without actually
   performing a simulation.
 - In non-interactive mode, <tt>SKIRT</tt> performs one or more simulations as specified in preconfigured \em ski files and
   produces the corresponding output. In this mode <tt>SKIRT</tt> expects no user input (other than the command line arguments)
   so it is ideal for batch processing.

\subsection UserCLIInter Interactive mode

When invoked without any command line arguments, <tt>SKIRT</tt> enters interactive mode. For example:
\verbatim
$ skirt
   Welcome to SKIRT v___
   Interactively constructing a simulation...
 ? Enter the name of the ski file to be created: example

   ___more questions and answers___

   Successfully created ski file 'example.ski'.
   To run the simulation use the command: skirt example
$
\endverbatim

The time stamp preceding each line, the version information on the welcome line, and the list of questions to configure
the simulation parameters are omitted here for brevity. After all questions have been answered, <tt>SKIRT</tt> saves a new
ski file (here called \c example.ski) and exits.

So that they would stand out, questions are marked with a question mark at the front and error messages are marked
with an asterisk. For example:
\verbatim
 ? Enter the name for this instrument:
 * *** Error: Enter a nonempty string
 ? Enter the name for this instrument: XY
\endverbatim

Where appropriate, the question lists the range of acceptable values between square brackets, as in \c
[minValue,maxValue]. Often there is a default value, listed between round brackets at the end of the question.
To select the default value, enter the empty string.
For example, here the user is asked to select an item from a list, with extragalactic units as the default:
\verbatim
   Possible choices for the units system:
      1. SI units
      2. Stellar units (length in AU, distance in pc)
      3. Extragalactic units (length in pc, distance in Mpc)
 ? Enter one of these numbers [1,3] (3):
\endverbatim

For physical quantities, the default units are listed in the question as part of the minimum, maximum and/or default
values. To use the default units, simply enter a number. To explicitly specify units, enter a number followed by
a space and a unit abbreviation (see \ref UserSKIUnits). For example, the following two inputs are equivalent:
\verbatim
 ? Enter the outer radius [0 pc, .. pc]: 8000
 ? Enter the outer radius [0 pc, .. pc]: 8 kpc
\endverbatim

Boolean questions can be answered with the strings "yes" or "no", or just the first letter "y" or "n",
in lower- or uppercase. For example:
\verbatim
 ? Do you want to use barycentric subdivision? [yes/no] (no): yes
\endverbatim

\subsection UserCLINonInter Non-interactive mode

When invoked with the name of a ski file as the sole command line argument, <tt>SKIRT</tt> performs the simulation
configured in the ski file, reading any required input files (specified in the ski file) from the current directory,
and placing any output files in the current directory as well. For example:
\verbatim
$ skirt example
   Welcome to SKIRT v___
   Constructing a simulation from ski file 'example.ski'...
   Starting simulation example...

   ___more progress messages___

 - Finished simulation example in __ s.
$
\endverbatim

SKIRT can perform multiple simulations in one go, and also supports a number of command line options
according to the following syntax:
\verbatim
 skirt [-b] [-s <simulations>] [-t <threads>]
       [-k] [-i <dirpath>] [-o <dirpath>]
       [-r] {<filepath>}*
\endverbatim

- The -b option forces brief console logging, i.e. only success and error messages are shown rather than all progress
messages. If there are multiple parallel simulations (see the -s option), the -b option is turned on automatically
to avoid a plethora of randomly intermixing messages. If there is only one simulation at a time, the console shows
all messages unless the -b option is present. In any case, the complete log output for each simulation is always
written to a file in the output directory.

- The -s option specifies the number of simulations to be executed in parallel. The default value is one.

- The -t option specifies the number of parallel threads for each simulation. The default value is the number
of logical cores on the computer running SKIRT. Note that <tt>SKIRT</tt> is not always able to correctly determine this number,
so it is good to keep an eye on it.

- The -k option causes the simulation input/output paths to be relative to the ski file being processed, rather than
to the current directory. This is useful, for example, when processing multiple ski files organized in a nested
directory hierarchy (see the -r option).

- The -i option specifies the absolute or relative path for simulation input files.

- The -o option specifies the absolute or relative path for simulation output files.

- The -r option causes recursive directory descent for all specified \<filepath\> arguments, in other words
all directories inside the specified base paths are searched for the specified filename (or filename pattern).

In the simplest case, a \<filepath\> argument specifies the relative or absolute file path for a
single ski file, with or without the ".ski" filename extension. However the filename (\em not the base path)
may also contain ? and * wildcards forming a pattern to match multiple files. If the -r option
is present, all directories recursively nested within the base path are searched as well, using
the same filename pattern. If the filename contains wildcards or the -r option is present (in
other words, if the filepath may match multiple files) the ".ski" filename extension is not automatically added.

\note Filepaths containing wildcards should be enclosed in quotes on the command
line to avoid expansion of the wildcard pattern by the shell.

For example, to process all "test" \em ski files inside the "geometry" directory hierarchy, one
could specify:

    skirt -s 4 -t 1 -r "/root-test-file-path/geometry/test*.ski"

When invoked with invalid command line arguments, <tt>SKIRT</tt> prints a brief help message.

\subsection UserCLIOutput Output files

A typical simulation run produces quite a few output files. The precise list depends on the contents of the \em ski file.
However all output filenames for a particular simulation start with the name of the ski file (plus an underscore).

Three "standard" files are always generated for every simulation (assuming a ski file named \c example.ski):

 - \c example_log.txt contains the complete progress log for the simulation, including all messages
   even if the -b option is turned on. It is a plain text file using UTF-8 encoding (i.e. essentially
   a plain ASCII text file).
 - \c example_parameters.xml contains a version of the <tt>SKIRT</tt> parameter file corresponding to the simulation,
   in the format described in \ref UserParamFile.
   The parameter file is regenerated after the incoming \em ski file has been interpreted by SKIRT, eliminating any
   ambiguities. For example, any parameters that were omitted from the incoming \em ski file will be added to the
   generated parameter file with the default value used for the simulation. To avoid confusion, the generated
   parameter file does not have the ".ski" filename extension. However the file can be renamed (possibly after
   manual editing) to serve as a regular ski file.
 - \c example_parameters.tex contains a TeX "printout" of the contents of the <tt>SKIRT</tt> parameter file
   corresponding to the simulation. Using a regular TeX installation, this file can be easily processed into
   a nicely formatted document.

Many of the other output files are described in the tutorials later in this chapter.

\section UserParamFile SKIRT parameter file format (ski file)

\subsection UserSKIStruct Structure of a ski file

A <tt>SKIRT</tt> parameter file is an XML document stored using UTF-8 encoding. The structure of the XML elements and attributes
closely mimics the run-time object hierarchy representing a simulation in the <tt>SKIRT</tt> code. For example:

\verbatim
<?xml version="1.0" encoding="UTF-8"?>
<!--SKIRT radiative transfer simulations-->
<skirt-simulation-hierarchy type="MonteCarloSimulation" format="6.1">
    <OligoMonteCarloSimulation packages="1e6">
        <units type="Units">
            <ExtragalacticUnits/>
        </units>
        <wavelengthGrid type="OligoWavelengthGrid">
            <OligoWavelengthGrid wavelengths="0.5 micron, 0.75 micron"/>
        </wavelengthGrid>

    ... more ...

    </OligoMonteCarloSimulation>
</skirt-simulation-hierarchy>
\endverbatim

An XML element called \c sample starts with a \c \<sample\> tag and ends with a
\c \</sample\> tag. An empty element \c \<sample\>\</sample\> can also be expressed with a single \c \<sample/\> tag.
XML elements can be nested inside other elements. An XML element can carry zero or more attributes. Attributes
are specified inside the start tag in the format \c key="value".
In ski files there is no text outside of the element tags, except for spaces and line breaks. This
white space is not meaningful except for presentation to a human. By convention the lines are indented so as
to reflect the nesting level of the XML elements.

After the standard XML declaration (and an optional comment line), a ski file always defines the XML element
\c skirt-simulation-hierarchy as the top-level or \em root element. The \c format attribute specifies the file format
version number, which allows future version of <tt>SKIRT</tt> to detect and adjust for ski files in older formats.
To represent a complete simulation hierarchy, further XML elements are nested recursively within the root element,
and some of these elements carry attributes.

An element with a capitalized name (i.e. the first letter is uppercase) represents an object, i.e. an instance
of a C++ class with the same name as the element. Such an element can carry attributes reflecting the scalar properties
of the object, and can contain nested elements reflecting compound properties of the object. The value of a
scalar property can be represented as a string (Boolean, integer number, floating point number with unit abbreviation,
comma-separated list of such numbers, ...), while the value of a compound property is another object or a list
of objects.

An element with a non-capitalized name (i.e. the first letter is lowercase) represents a compound property of the
object represented by its parent element. Such an element always has a single attribute called \c type, which
indirectly specifies the names of the XML element or elements that can be immediately contained inside the element.
The type corresponds to the name of an abstract C++ class, and the names of the immediately contained
element(s) must correspond to a C++ class that inherits the specified abstract class.

The root element always has type \c MonteCarloSimulation.

\subsection UserSKIEdit Editing a ski file

You can edit a ski file with any text editor. Many text editors offer syntax coloring for xml files (although you will
have to setup the editor so that it recognizes the ".ski" filename extension in addition to .xml). Syntax coloring is
nice but not really needed for working with ski files.

It is not a good idea to manually create a ski file from scratch, since the <tt>SKIRT</tt> simulation object hierarchy has many
complexities that are easy to miss. Instead use SKIRT's interactive mode to create a ski file that approximates your
requirements. Then use a text editor to make small changes, such as updating the number of photon packages
or adding an instrument.

Based on the naming conventions explained in \ref UserSKIStruct, it is fairly easy to locate the information
about a particular parameter in the <tt>SKIRT</tt> reference documentation, even if you are not a developer:
 - A capitalized element name (i.e. the first letter is uppercase) corresponds to a C++ class name.
 - A non-capitalized element name (i.e. the first letter is lowercase) corresponds to a function name in the C++ class
   corresponding to the name of the element containing the non-capitalized element under consideration.
 - An XML attribute name (except \c type) corresponds to a function name in the C++ class corresponding to the name
   of the element carrying the attribute.

\subsection UserSKIUnits Supported units

When <tt>SKIRT</tt> outputs a parameter file, it always uses the defaults of the units system selected by the ski file.
However when reading parameters in ski files and in interactive mode, <tt>SKIRT</tt> recognizes the folowing unit abbreviations
for physical quantities (don't forget the space between the number and the unit abbreviation):

 - length or distance: <tt>m, cm, km, AU, pc, kpc, Mpc</tt>
 - wavelength or grainsize: <tt>m, cm, mm, micron, nm, A</tt>
 - cross section: <tt>m2</tt>
 - volume: <tt>m3, AU3, pc3</tt>
 - velocity: <tt>m/s, km/s</tt>
 - mass: <tt>kg, g, Msun</tt>
 - mass surface density: <tt>kg/m2, Msun/AU2, Msun/pc2</tt>
 - mass volume density: <tt>kg/m3, g/cm3, Msun/AU3, Msun/pc3</tt>
 - opacity: <tt>m2/kg</tt>
 - energy: <tt>J</tt>
 - bolometric luminosity: <tt>W, Lsun</tt>
 - monochromatic luminosity: <tt>W/m, W/micron, Lsun/micron</tt>
 - bolometric flux: <tt>W/m2</tt>
 - monochromatic flux: <tt>W/m3, W/m2/micron</tt>
 - bolometric surface brightness: <tt>W/m2/sr, W/m2/arcsec2</tt>
 - monochromatic surface brightness: <tt>W/m3/sr, W/m2/micron/arcsec2</tt>
 - temperature: <tt>K</tt>
 - angular size: <tt>rad, deg, arcsec</tt>
 - positioning angle: <tt>rad, deg</tt>
 - solid angle: <tt>sr, arcsec2</tt>


\section UserTut1 Tutorial 1: Monochromatic simulation of a dusty disk galaxy

\image html TutorialMonoDisc.png
\image latex TutorialMonoDisc.png

In this tutorial you will use <tt>SKIRT</tt> to produce a nearly edge-on V-band image of a dusty disk galaxy model
(see illustration).
You will create a \em ski file containing the appropriate simulation parameters, and then you will actually perform the
simulation. Finally you will adjust the \em ski file and perform a second simulation with slightly different parameters.

\subsection UserTut1Pre Getting ready

Before starting this tutorial, you should have installed and/or built the <tt>SKIRT</tt> code as described in the
\ref InstallationGuide. You should also have at least glanced through the earlier sections in the \ref UsersGuide.

Since <tt>SKIRT</tt> is a command line tool, you need to open a Terminal window so that you can enter commands at the prompt.

For brevity the examples in this tutorial omit portions of the <tt>SKIRT</tt> output, such as the time stamp
preceding each line and the version information on the welcome line.

\subsection UserTut1Ski Creating the ski file

SKIRT stores all parameter values describing a particular simulation in a file with the ".ski" filename extension.
To create a new ski file, you need to start <tt>SKIRT</tt> without any command line arguments. The ski file will be created
in the current directory; for this tutorial you should use the \c run directory you created during <tt>SKIRT</tt> installation.
Enter the following commands in a Terminal window:

\verbatim
cd ~/SKIRT/run
skirt
\endverbatim

If \c skirt is not in your system path, you must replace the last line by the absolute or relative path
of the \c skirt executable; for example:

\verbatim
cd ~/SKIRT/run
../release/skirt
\endverbatim

SKIRT responds with a welcome message and starts an interactive session in the terminal window, during which it
will prompt you for all the information describing a particular simulation:

\verbatim
   Welcome to SKIRT v___
   Interactively constructing a simulation...
 ? Enter the name of the ski file to be created: MonoDisk
\endverbatim

The first question is for the filename of the ski file. For this tutorial, enter "MonoDisk".

\subsection UserTut1Sim Type of simulation

\verbatim
   Possible choices for the simulation:
      1. An oligochromatic Monte Carlo simulation
      2. A panchromatic Monte Carlo simulation
 ? Enter one of these numbers [1,2] (1): 1
\endverbatim

SKIRT offers two types of Monte Carlo simulation:
- An oligochromatic simulation operates at one or more distinct wavelengths rather than a discretized range.
  In such a simulation there can be absorption and scattering by dust grains, but by definition there is no
  thermal dust emission (calculating the dust temperature requires integrating over a range of wavelengths).
- A panchromatic simulation operates at a range of wavelengths (discretized on a grid) usually spanning UV,
  optical and infrared bands. In such a simulation there can be absorption, scattering and thermal emission
  by dust grains. This is the most powerful simulation type.

Your simulation will run at a single wavelength in the V-band, where thermal dust emission has no effect.
An oligochromatic simulation is sufficient and most performance-effective for these purposes.

\subsection UserTut1Ran Random generator

\verbatim
   Possible choices for the random number generator:
      1. The default random generator
   Automatically selected the only choice: 1
 ? Enter the seed for the random generator [1,2000000000] (4357):
\endverbatim

SKIRT currently offers only a single random generator, so the default choice is automatically selected. If desired
you can enter a custom seed for the random generator, but the default value is almost always fine.
One reason to specify a custom seed is to repeat a simulation with a different realization of random model attributes,
such as the clumps in a clumpy medium.

\subsection UserTut1Uni Units

\verbatim
   Possible choices for the units system:
      1. SI units
      2. Stellar units (length in AU, distance in pc)
      3. Extragalactic units (length in pc, distance in Mpc)
 ? Enter one of these numbers [1,3] (3):
\endverbatim

SKIRT offers three sets of input/output units:
 - SI units: standard international units. <tt>SKIRT</tt> always uses SI units for internal computations; the other
   unit systems are provided for user convenience: all values are converted to SI units during input and
   from SI units during output.
 - Stellar units: use AU as the unit of length, parsec as the unit of distance, micron as the unit of wavelength,
   and \f$M_\odot\f$ as the unit of mass.
 - Extragalactic units: use parsec as the unit of length, Mpc as the unit of distance, micron as the unit of wavelength,
   and \f$M_\odot\f$ as the unit of mass.

Since you will be simulating a galaxy, select extragalactic units (the default choice).

\subsection UserTut1Inst Instrument system

Running a radiative transfer simulation is not particularly useful unless the results are registered by one or more
instruments, which collect the photon packages that leave the system, in a process similar to the operation of
real instruments at a telescope.

The <tt>SKIRT</tt> instruments essentially simulate imaging spectrometers, i.e. 3D spectrographs with one
wavelength dimension (determined by the simulation's wavelength grid) and
two spatial directions on the plane of the sky. Each instrument is
characterized by its own instrumental characteristics (pixel size and
field of view in the horizontal and vertical directions) and by its
position with respect to the system (for axisymmetric systems, this
means the inclination and distance).

It should be noted that the number of instruments, and the pixel size of these instruments, strongly influence
both memory consumption (for storing the data cubes) and simulation run time (for peeling off photon packages
in the direction of each instrument).

\verbatim
   Possible choices for the instrument system:
      1. An instrument system
   Automatically selected the only choice: 1
\endverbatim

There is only one type of instrument system (simply a list of instruments) so the default choice is automatically
selected.

\verbatim
   Possible choices for item #1 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
      3. A basic instrument that outputs the total flux as data cube and as SED
      4. An advanced instrument that records individual contributions to the flux
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 2
 ? Enter the name for this instrument: i88
 ? Enter the distance to the system [0 Mpc,.. Mpc]: 10
 ? Enter the inclination angle of the detector [0 deg,180 deg] (0 deg): 88
 ? Enter the azimuth angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the position angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the number of pixels in the horizontal direction [25,10000] (250): 800
 ? Enter the maximal horizontal extent [0 pc,.. pc]: 20000
 ? Enter the number of pixels in the vertical direction [25,10000] (250): 200
 ? Enter the maximal vertical extent [0 pc,.. pc]: 5000
\endverbatim

For the first (and only) instrument in this tutorial simulation, select a basic instrument that outputs the total
flux in every pixel. Since you will be shooting photon packages at a single wavelength only, the "data cube" will
have only one frame. Also it doesn't make any sense to produce an SED.

Specify an appropriate name for the instrument. This name is used to identify the output files for the instrument.
This is not so relevant here, but it becomes important when there are multiple instruments. Further specify
a size of 800 times 200 pixels with a scale of 50 pc, a distance of 10 Mpc from the galaxy, and
an inclination of 88 degrees. The remaining two position angles can be left to their default values of zero.

\verbatim
   Possible choices for item #2 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 0
\endverbatim

When asked for the second instrument, enter a zero to terminate the list, since the tutorial simulation
has only one instrument.

\subsection UserTut1Phot Photon packages

The number of photon packages launched for each wavelength is a very important parameter, since it
determines the accuracy of your simulation. On the other hand, the simulation run time essentially scales with
the number of photon packages (multiplied by the number of wavelengths).
Typical values range from \f$10^5\f$ to \f$10^9\f$. An appropriate number is usually determined experimentally:
first run your simulation with a modest number of photon packages, look at the
results and then run the simulation again with more photon packages if needed.

\verbatim
 ? Enter the number of photon packages per wavelength [1e4,2e13] (1e6):
\endverbatim

For your first simulation, leave the number of photon packages at the default value of \f$10^6\f$.

\subsection UserTut1Wave Wavelength grid

SKIRT works with a fixed wavelength grid, i.e. a vector of \f$N_\lambda\f$ wavelengths, on which the entire simulation
is run. For an oligochromatic simulation, the grid simply consists of one or more distinct wavelengths.

\verbatim
   Possible choices for the wavelength grid:
      1. A list of one or more distinct wavelengths
   Automatically selected the only choice: 1
 ? Enter the wavelengths [0.0001 micron,1e6 micron]: 0.55
\endverbatim

For an oligochromatic simulation, the single applicable "wavelength grid" is automatically selected.
To obtain a V-band image, enter a wavelength "list" containing the single value \f$\lambda=0.55~\mu{\text{m}}\f$.

\subsection UserTut1Stel Stellar system

Each simulation must contain some luminous sources which emit radiation. In <tt>SKIRT</tt> terminology, these sources
form a stellar system. A stellar system can be composed of a number of stellar components, each with
specific geometric and emission properties which can be configured using built-in features or may be imported from
the output of a hydrodynamical simulation in various formats.

\verbatim
   Possible choices for the stellar system:
      1. A stellar system
   Automatically selected the only choice: 1
\endverbatim

Since there is only one type of stellar system, it is automatically selected.

\verbatim
   Possible choices for item #1 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
      2. A stellar component derived from an SPH output file
      3. A stellar component imported from an adaptive mesh data file
      4. A stellar component imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 1
\endverbatim

The stellar system in this tutorial simulation is composed of two components, a disk and a bulge, which are
configured using built-in features. So you need to select the "built-in geometry" stellar component type.

\verbatim
   Possible choices for the geometry of the stellar distribution:
      1. A point source geometry
      2. A Plummer geometry
      3. A gamma geometry
         ...
      9. An exponential disk geometry
         ...
     22. A spheroidal variant of any spherical geometry
     23. A triaxial variant of any spherical geometry
 ? Enter one of these numbers [1,23] (1): 9
 ? Enter the radial scale length [0 pc,.. pc]: 4000
 ? Enter the axial scale height [0 pc,.. pc]: 350
 ? Enter the radial truncation length [0 pc,.. pc] (0 pc):
 ? Enter the axial truncation height [0 pc,.. pc] (0 pc):
 ? Enter the luminosities, one per wavelength, in solar units [0,..]: 5e9
\endverbatim

In an oligochromatic simulation, each stellar component is characterized by a particular geometry and by the
total component luminosity at each wavelength in the simulation's wavelength grid. For the geometry,
select an exponential disk with a scale length of 4 kpc and a scale height of 350 pc, without truncation.
Further specify a V-band luminosity of \f$L_{\text{V}} = 5\times10^9~L_{\odot,{\text{V}}}\f$.

\verbatim
   Possible choices for item #2 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
      2. A stellar component derived from an SPH output file
      3. A stellar component imported from an adaptive mesh data file
      4. A stellar component imported from a Voronoi mesh data file
 ? Enter one of these numbers [0,4] (0): 1
   Possible choices for the geometry of the stellar distribution:
      1. A point source geometry
      2. A Plummer geometry
      3. A gamma geometry
         ...
     20. A geometry that adds an offset to any geometry
     21. A geometry that adds clumpiness to any geometry
     22. A spheroidal variant of any spherical geometry
     23. A triaxial variant of any spherical geometry
 ? Enter one of these numbers [1,23] (1): 22
   Possible choices for the original spherical geometry:
      1. A Plummer geometry
      2. A gamma geometry
      3. A Sersic model geometry
      4. A pseudo-Sersic geometry
      5. An Einasto geometry
      6. A shell geometry
 ? Enter one of these numbers [1,6] (1): 3
 ? Enter the Sersic index n [0.5,10] (1): 2
 ? Enter the effective radius [0 pc,.. pc]: 1600
 ? Enter the flattening parameter q [0,1] (1): 0.7
 ? Enter the luminosities, one per wavelength, in solar units [0,..]: 3e9
\endverbatim

For the second stellar component, again
select the "built-in geometry" stellar component type. For the geometry, select a spheroidal variant of
the Sersic model with Sersic index \f$n=2\f$, effective radius \f$R_{\text{e}} = 1.6\f$ kpc, and
flattening parameter \f$q=0.7\f$. Further specify a V-band luminosity of \f$L_{\text{V}}
= 3\times10^9~L_{\odot,{\text{V}}}\f$.

SKIRT offers a number of decorator geometries to modify other geometries in various ways, including
off-center translation, adding clumpiness, and flattening (spheroidal or triaxial). You must select
the decorator geometry \em before the geometry being decorated. Decorator geometries can be nested,
for example to form a clumpy triaxial Einasto geometry.

\verbatim
   Possible choices for item #3 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
         ...
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 0
\endverbatim

When asked for the third stellar component, terminate the list by entering a zero.

\subsection UserTut1Dust Dust system

The dust system contains all the information on the dust in a <tt>SKIRT</tt> Monte Carlo simulation. Broadly speaking,
a dust system consists of two pieces of information. On the one hand, it includes a complete description of
the spatial distribution and optical properties of the dust (the <em>dust distribution</em>).
On the other hand, it contains all information on the grid structure on which this distribution is discretized
(the <em>dust grid</em>).

\verbatim
   Possible choices for the dust system:
      1. A dust system for use with oligochromatic simulations
 ? Enter one of these numbers or zero to select none [0,1] (1): 1
\endverbatim

For an oligochromatic simulation, the only applicable type of dust system is the oligochromatic dust system,
which implements dust absorption and scattering but does not support thermal emission by the dust.
However the dust system is optional: if you enter a zero in response to the above question, the simulated system
will contain no dust (and hence there will be no dust absorption and scattering). For this tutorial simulation,
do select a dust system (or the results would not be extremely interesting).

\verbatim
   Possible choices for the dust distribution:
      1. A dust distribution composed of various dust components
      2. A dust distribution derived from an SPH output file
      3. A dust distribution imported from an adaptive mesh data file
      4. A dust distribution imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 1
\endverbatim

Similar as for the stellar system, the dust distribution can be composed of a number of dust components,
each with specific geometry and dust properties, or it can be created from the output of a
hydrodynamical simulation.

The dust distribution in this tutorial simulation is composed of a single disk component. So you need
to select the "component" dust distribution type.

\verbatim
   Possible choices for item #1 in the dust components list:
      1. A dust component
   Automatically selected the only choice: 1
   Possible choices for the geometry of the dust component:
      1. A point source geometry
      2. A Plummer geometry
      3. A gamma geometry
         ...
      9. An exponential disk geometry
         ...
 ? Enter one of these numbers [1,23] (9): 9
 ? Enter the radial scale length [0 pc,.. pc]: 4000
 ? Enter the axial scale height [0 pc,.. pc]: 140
 ? Enter the radial truncation length [0 pc,.. pc] (0 pc):
 ? Enter the axial truncation height [0 pc,.. pc] (0 pc):
   Possible choices for the dust mixture of the dust component:
      1. A Draine & Li (2007) dust mix
      2. A dust mix with average interstellar properties
      3. A dust mix with mean Zubko properties
         ...
 ? Enter one of these numbers [1,9] (2): 2
 ? Output the optical properties of the dust mix? [yes/no] (yes):
 ? Output the mean optical properties of the dust mix? [yes/no] (yes):
   Possible choices for the type of normalization for the dust component:
      1. Normalization by defining the total dust mass
      2. Normalization by defining the radial optical depth
      3. Normalization by defining the face-on optical depth
      4. Normalization by defining the edge-on optical depth
         ...
 ? Enter one of these numbers [1,7] (1): 3
 ? Enter the wavelength for the optical depth [0.0001 micron,1e6 micron]: 0.55
 ? Enter the face-on optical depth at this wavelength [0,..]: 1
\endverbatim

Each dust component is characterized by a particular geometry (determining the dust density distribution),
a dust mix (determining the optical properties of the dust grains), and normalization parameters
(determining the total amount of dust in the component).
The amount of dust is often determined by specifying the face-on or edge-on optical
depth at a given wavelength.

There is only one type of dust component, so the first dust component is automatically selected. For the geometry,
select an exponential disk with a scale length of 4 kpc and a scale height of 140 pc, without truncation.
Select a dust mixture based on the average properties of the diffuse dust in the Milky Way.
Further specify normalization based on a face-on optical depth of 1 at wavelength \f$\lambda=0.55~\mu{\text{m}}\f$.

Note that the dust scale height is much smaller than the stellar scale height, which should produce a nice dust lane
when viewing the galaxy edge-on.

\verbatim
   Possible choices for item #2 in the dust components list:
      1. A dust component
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 0
\endverbatim

When asked for the second dust component, terminate the list by entering a zero.

\verbatim
   Possible choices for the dust grid structure:
      1. A cylindrical grid structure with a linear distribution
      2. A cylindrical grid structure with a power-law distribution
         ...
      9. An octtree dust grid structure
     10. A k-d tree (binary tree) dust grid structure
         ...
 ? Enter one of these numbers [1,12] (8): 2
 ? Output data files for plotting the structure of the grid? [yes/no] (yes):
 ? Enter the outer radius in the radial direction [0 pc,.. pc]: 25000
 ? Enter the ratio of the bin widths in the radial direction [0,1e4] (50): 30
 ? Enter the number of radial grid points [5,100000] (250): 100
 ? Enter the outer radius in the axial direction [0 pc,.. pc]: 5000
 ? Enter the ratio of bin widths in the axial direction [0,1e4] (50): 50
 ? Enter the number of axial grid points [5,100000] (250): 100
\endverbatim

As mentioned above, <tt>SKIRT</tt> discretizes the dust on a grid structure, i.e. a collection of small dust cells covering
three-dimensional space. Within each cell, the density and temperature of the dust are considered to be uniform.
SKIRT offers several types of dust grids, which can be selected depending on the requirements of the simulation.

Depending on the symmetries in the stellar and dust geometries,
SKIRT supports 1D spherical grids (the grid cells are thin concentric shells), 2D axisymmetric grids (the grid cells
have the form of a torus) and 3D cartesian grids (the grid cells are little cuboids). Naturally simulations in
a 1D or 2D grid (when allowed by the system's geometry) are much more efficient than simulations in a full 3D grid.

Each grid type features parameters to set the detailed grid cell distribution in each direction.
This is one of the most difficult tasks during model setup. The grid must be
chosen in such a way that the entire configuration space is covered
and with the resolution highest in those parts where the radiation
field or the dust density changes most. In many cases, a linear
distribution is not the best choice. A logarithmic grid is denser in
the centre than in the outer regions, which is often required. A
logarithmic grid however, has the drawback that it does not go all the
way down to zero. A useful alternative is the power-law grid,
in which the dust cells are also gradually bigger when they are farther
away from the centre.

For this tutorial simulation, select a 2D cylindrical grid structure with a power-law distribution in both directions.
Specify a radius of 25 kpc and height of 5 kpc, which should be sufficient to contain the vast majority of the dust,
and 100 cells in each direction (so that there are 10000 cylindrical cells in total).
Further specify a ratio of the width of the innermost and outermost bins of 30 in the radial and 50 in the
vertical direction; the ratio is larger in the vertical direction because we want a higher resolution there
in the inner regions.

\verbatim
 ? Enter the number of samples for determining cell mass [10,1000] (100):
 ? Output convergence checks on the dust system? [yes/no] (yes):
 ? Output the dust density distribution? [yes/no] (yes):
 ? Output quality metrics for the dust grid? [yes/no] (no):
 ? Output relevant properties for all dust cells? [yes/no] (no):
 ? Output the number of cells crossed per path? [yes/no] (no):
\endverbatim

Finally the dust system takes a few additional parameters which can be left to their default value.

\subsection UserTut1Writ Writing the ski file

\verbatim
   Successfully created ski file 'MonoDisk.ski'.
   To run the simulation use the command: skirt MonoDisk
\endverbatim

After all questions have been answered, <tt>SKIRT</tt> writes out the resulting ski file and terminates.

\subsection UserTut1Run Running the simulation

To actually run the simulation, enter the following command (with the same current directory):

\verbatim
skirt MonoDisk
\endverbatim

Or if \c skirt is not in your system path, include the absolute or relative path of the \c skirt executable;
for example:

\verbatim
../release/skirt MonoDisk
\endverbatim

SKIRT responds with a welcome message and immediately starts performing the simulation. In this mode <tt>SKIRT</tt> never
asks a question so it can be left to run unattended:

\verbatim
   Welcome to SKIRT v___
   Constructing a simulation from ski file 'MonoDisk.ski'...
   Starting simulation MonoDisk...
   Starting setup...
   ...
 - Finished setup in 1.4 s.
   Starting the simulation run...
   Starting the stellar emission phase...
   ...
 - Finished the stellar emission phase in 14.3 s.
   Starting writing results...
   ...
 - Finished writing results in 0.0 s.
 - Finished the simulation run in 14.4 s.
 - Finished simulation MonoDisk in 15.8 s.
\endverbatim

SKIRT produces various log messages to report on specific activities and overall progress.
The execution of a simulation progresses in three distinct stages:
  - During \em construction, an internal data structure is created representing the simulation, based on the
    contents of the specified ski file. In addition to remembering all ski file parameters, the data structure
    provides room for all data used and/or produced during the simulation. Since the data is not yet initialized,
    construction completes in a fraction of a second (or fails if there is a problem with the ski file).
  - During \em setup, all simulation data structures are initialized. For example, dust properties are
    read from data files, and the dust density is computed for all cells in the dust grid. Depending on the simulation
    model and parameters, setup may take seconds, minutes or even hours.
  - During the \em simulation \em run, photon packages are launched through the dust grid and detected by instruments;
    at the end the simulation results are written to disk. For an oligochromatic simulation, there is just a stellar
    emission phase (for each wavelength). In panchromatic simulations, there can also be dust self-absorption
    and dust emission phases.

\subsection UserTut1Output Output files

The output files for this tutorial simulation are written in the current directory. All filenames start with
"MonoDisk", i.e. the name of the ski file. Three files are always generated for every simulation:
 - \c MonoDisk_log.txt contains the progress log as it was written to the console.
 - \c MonoDisk_parameters.xml contains a copy of the ski file, with a time stamp of when the simulation was run.
 - \c MonoDisk_parameters.tex contains a TeX "printout" of the contents of the ski file.
   Using a regular TeX installation, this file can be easily processed into a nicely formatted document.

During setup <tt>SKIRT</tt> outputs several files describing the dust system (you can turn this off by answering "no" to
the respective questions during the interactive session). The following files are written for this tutorial simulation
(where "ds" stands for "dust system"):
 - \c MonoDisk_ds_convergence.dat is a short text file providing a consistency check on the distribution of the
   grid cells. It contains the face-on and edge-on central surface density of the dust distribution
   as well as the total equivalent dust mass (1) obtained by integrating over the cells and (2) as expected
   without discretization. If these numbers match within a few percent, your dust grid samples the dust
   density well. If there are large deviations, it might be useful to consider a different grid cell
   distribution (e.g. with a larger extent, with more resolution, or with more or less contrast between
   inner and outer cells).
 - \c MonoDisk_ds_mix_0_mass.dat & \c MonoDisk_ds_0_mean.dat & \c MonoDisk_ds_0_opti.dat list various properties
   of the dust used in the simulation. The number in the filename indicates the dust component index; each file
   lists information on the various dust populations contained in the indicated dust component. In this tutorial
   simulation, there is only a single dust component that contains only a single dust population.
   The first file provides information on the dust mass fraction contained in each dust population.
   The second file provides average extinction, absorption and scattering coefficients and the asymmetry parameter.
   The third file contains detailed optical properties for each dust population used in the simulation.
 - \c MonoDisk_ds_gridxy.dat & \c MonoDisk_ds_gridxz.dat are data files in a text format that can be easily plotted.
   Each file describes the intersection of the dust grid structure with one of the coordinate planes.
 - \c MonoDisk_ds_trhoxy.fits & \c MonoDisk_ds_trhoxz.fits ("theorical rho") are single-frame FITS data files,
   each providing a 1024 x 1024 pixel map of the theoretical dust density in a coordinate plane, across
   the total extension of the dust grid. These density values are determined from the dust distribution as if
   there is an infinitely fine dust grid.
 - \c MonoDisk_ds_grhoxy.fits & \c MonoDisk_ds_grhoxz.fits ("gridded rho") are single-frame FITS data files,
   each providing a 1024 x 1024 pixel map of the grid-discretized dust density in a coordinate plane, across
   the total extension of the grid. These density values are read from the finite-resolution dust grid structure
   constructed for the simulation.

Finally the instrument specified for this tutorial simulation also produces an output file:
 - \c MonoDisk_i88_total.fits (where "i88" is the specified instrument name) is a FITS file containing the data cube
   with the total flux as detected by the instrument. Since the simulation has only one wavelength, there is only
   a single frame in the output file.

\subsection UserTut1Edit Adjusting the ski file

There is no need to go through the lengthy interactive Q&A process again if you just want to re-run a simulation
with slightly adjusted parameters. You can manually edit the ski file instead.

Duplicate the file \c MonoDisk.ski to a new file named MonoDisk2.ski and open this new file in Qt Creator (or in
any decent text editor). It should look similar to the following snippet, where "..." indicates omitted information:

\verbatim
...
<skirt-simulation-hierarchy type="MonteCarloSimulation" ...">
    <OligoMonteCarloSimulation packages="1e6">
        ...
        <instrumentSystem type="InstrumentSystem">
            ...
            <FrameInstrument instrumentName="i88" distance="10 Mpc"
                pixelsX="800" extentX="2e4 pc" pixelsY="200" extentY="5000 pc"
                inclination="88 deg" azimuth="0 deg" positionAngle="0 deg"/>
            ...
        </instrumentSystem>
        <wavelengthGrid type="OligoWavelengthGrid">
            <OligoWavelengthGrid wavelengths="0.55 micron"/>
        </wavelengthGrid>
        <stellarSystem type="StellarSystem">
            ...
        </stellarSystem>
        <dustSystem type="OligoDustSystem">
            ...
        </dustSystem>
    </OligoMonteCarloSimulation>
</skirt-simulation-hierarchy>
\endverbatim

Make the following changes:
 - increase the number of photon packages by a factor of five (replace "1e6" by "5e6");
 - add a second instrument by duplicating the <FrameInstrument ... /> element;
 - change the new instrument's name to i84 and adjust its inclination to 84 degrees.

Save your changes and execute the adjusted simulation using the command "skirt MonoDisk2". The simulation will run
substantially slower because you launch more photons and because there are more instruments.

Look at the differences between output files:
 - \c MonoDisk_i88_total.fits and \c MonoDisk2_i88_total.fits (more photon packages)
 - \c MonoDisk2_i84_total.fits and \c MonoDisk2_i88_total.fits (different inclination)

\section UserTut2 Tutorial 2: Producing an SED for the results of an SPH simulation

\image html TutorialPanSPH.png
\image latex TutorialPanSPH.png

In this tutorial you will use <tt>SKIRT</tt> to produce a spectral energy distribution (%SED) spanning multiple wavelength bands
for a model imported from the output of a Smoothed Particle Hydrodynamic (SPH) simulation.

\subsection UserTut2Pre Getting ready

Before starting this tutorial, you should have installed and/or built the <tt>SKIRT</tt> code as described in the
\ref InstallationGuide, \em and you should have completed the previous tutorial \ref UserTut1.
A lot of information provided in the previous tutorial is not repeated here!

To complete this tutorial, you need SPH output data that is converted to a format appropriate for importing in SKIRT.
You need a file with stellar particle data and one with gas particle data. The required file formats are described
in the documentation for the functions SPHStellarComp::setFilename() and SPHDustDistribution::setFilename().

Download the files \c eagle_stars.dat and \c eagle_gas.dat from the <tt>SKIRT</tt> downloads page
<a href="http://www.skirt.ugent.be/downloads">www.skirt.ugent.be/downloads</a>
and put them into your \c ~/SKIRT/run directory.

\subsection UserTut2Ski Creating the ski file

In a Terminal window, with an appropriate current directory, start <tt>SKIRT</tt> without any command line arguments.
SKIRT responds with a welcome message and starts an interactive session in the terminal window, during which it
will prompt you for all the information describing a particular simulation:

\verbatim
   Welcome to SKIRT v___
   Interactively constructing a simulation...
 ? Enter the name of the ski file to be created: PanSPH
\endverbatim

The first question is for the filename of the ski file. For this tutorial, enter "PanSPH".

\subsection UserTut2Sim Type of simulation

\verbatim
   Possible choices for the simulation:
      1. An oligochromatic Monte Carlo simulation
      2. A panchromatic Monte Carlo simulation
 ? Enter one of these numbers [1,2] (1): 2
\endverbatim

In this tutorial the goal is to produce a spectral energy distribution (%SED) including infrared wavelengths
and thus the effects of thermal emission by the dust. By definition this requires a panchromatic simulation.

Leave the parameters related to the random generator and the units system to their default values (not shown).

\subsection UserTut2Inst Instrument system

\verbatim
   Possible choices for the instrument system:
      1. An instrument system
   Automatically selected the only choice: 1
   Possible choices for item #1 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
      3. A basic instrument that outputs the total flux as data cube and as SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 1
 ? Enter the name for this instrument: i90
 ? Enter the distance to the system [0 Mpc,.. Mpc]: 10
 ? Enter the inclination angle of the detector [0 deg,180 deg] (0 deg): 90
 ? Enter the azimuth angle of the detector [-360 deg,360 deg] (0 deg): 0
 ? Enter the position angle of the detector [-360 deg,360 deg] (0 deg): 0
   Possible choices for item #2 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 0
\endverbatim

For this tutorial, configure at least one instrument of the type that outputs the total integrated flux as an SED.
Specify an inclination and a distance to the system of your liking. You may configure additional instruments,
of the same or of a different type, as you wish.

\verbatim
 ? Enter the number of photon packages per wavelength [1e4,2e13] (1e6): 1e5
\endverbatim

To limit the run time (while at the same time reducing the quality of the results),
set the number of photon packages to \f$10^5\f$.

\subsection UserTut2Wave Wavelength grid

\verbatim
   Possible choices for the wavelength grid:
      1. A logarithmic wavelength grid
      2. A nested logarithmic wavelength grid
      3. A wavelength grid read from a file
 ? Enter one of these numbers [1,3] (1): 1
 ? Output a data file listing the wavelength grid points? [yes/no] (no):
 ? Enter the shortest wavelength [0.0001 micron,1e6 micron]: 0.1
 ? Enter the longest wavelength [0.0001 micron,1e6 micron]: 1000
 ? Enter the number of wavelength grid points [2,2000000000] (25): 30
\endverbatim

SKIRT currently offers three possibilities: a simple logarithmic grid, a logarithmic grid with a built-in
logarithmic subgrid and a wavelength grid read from a file. Here are some guidelines for an
appropriate choice of the wavelength grid:
 - The coverage of your wavelength grid should be appropriate to the radiative transfer problem.
   Typically radiation is absorbed at UV and optical wavelengths and re-emitted at far-infrared and submillimetre
   wavelengths. So your wavelength grid should typically range from the
   UV to the submm range, i.e. from about 0.1 to 1000 \f$\mu\f$m.
 - On the other hand, don't make your wavelength coverage too large. In order to make a meaningul simulation,
   <tt>SKIRT</tt> must know the spectral properties of the emitters (the stars) and the optical properties of the dust
   at all wavelengths considered. Typically, you should not consider wavelengths shorter than 0.01 \f$\mu\f$m or
   longer than a few mm. If you choose a dust species (see later on) for which the optical properties are not
   defined over the entire specified wavelength range, <tt>SKIRT</tt> will not be able to perform the simulation.
 - You should consider enough grid points to ensure that you have sufficient resolution and precision.
   On the other hand, don't choose a grid that is too fine: the simulation run time is approximately proportional
   to the number of grid points in the wavelength grid. A typical setup uses about 20 grid points for every
   order in wavelength. If you want much more resolution in a certain wavelength range, for example because
   you are studying a spectral region in detail, you can use the nested logarithmic grid.
 - Whatever you decide to do, always make sure that the wavelength grid includes the V band, since the central
   wavelength of the V band is where the optical properties of the dust are normalized. If 550 nm
   is not covered by your wavelength grid, <tt>SKIRT</tt> will terminate.

For this tutorial, select a wavelength grid with 30 grid points distributed logarithmically between 0.1 and 1000
\f$\mu\f$m.

\subsection UserTut2Stel Stellar system

\verbatim
   Possible choices for the stellar system:
      1. A stellar system
   Automatically selected the only choice: 1
   Possible choices for item #1 in the stellar components list:
      1. A stellar component with a built-in geometry (in an panchromatic simulation)
      2. A stellar component derived from an SPH output file
      3. A stellar component imported from an adaptive mesh data file
      4. A stellar component imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 2
 ? Enter the name of the file with the SPH star particles: eagle_stars.dat
 ? Output the luminosities per wavelength bin? [yes/no] (no):
\endverbatim

In this tutorial, the stellar information is imported from the output of an SPH simulation. You need SPH stellar
particle data in a format appropriate for importing in SKIRT, as described in the documentation for the function
SPHStellarComp::setFilename(). Select the appropriate stellar component type and enter the name of your stellar
particle data file.

\subsection UserTut2Dust Dust system

\verbatim
   Possible choices for the dust system:
      1. A dust system for use with panchromatic simulations
 ? Enter one of these numbers or zero to select none [0,1] (1):
   Possible choices for the dust distribution:
      1. A dust distribution composed of various dust components
      2. A dust distribution derived from an SPH output file
      3. A dust distribution imported from an adaptive mesh data file
      4. A dust distribution imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 2
 ? Enter the name of the file with the SPH gas particles: eagle_gas.dat
 ? Enter the fraction of the metal content locked up in dust grains [0,1] (0.3): 0.3
 ? Enter the maximum temperature for a gas particle to contain dust [0 K,1e6 K] (75000 K):
\endverbatim

For a panchromatic simulation, the only applicable type of dust system is the panchromatic dust system,
which supports thermal dust emission in addition to absorption and scattering.
The dust system is optional, so you need to explicitly select it.

In this tutorial, the dust distribution is imported from the output of an SPH simulation. You need SPH gas particle
data in a format appropriate for importing in SKIRT, as described in the documentation for the function
SPHDustDistribution::setFilename().
Select the appropriate dust distribution type and enter the name of your gas particle data file.

SKIRT estimates the dust density distribution from the gas particle data through a simple scheme:
the dust density is assumed to be proportional to the density of the metallic gas. The proportionality factor
must be provided as a factor. A typical value is 0.3.

\verbatim
   Possible choices for the dust mix describing the attributes of the dust:
      1. A Draine & Li (2007) dust mix
      2. A dust mix with average interstellar properties
      3. A dust mix with mean Zubko properties
      4. A dust mix from the 1D benchmark model (Ivezic et al. 1997)
      5. A dust mix from the 2D benchmark model (Pascucci et al. 2004)
      6. An MRN multi-component dust mix
      7. A Weingartner & Draine multi-component dust mix
      8. A Zubko et al. multi-component dust mix
      9. A configurable multi-component dust mix
 ? Enter one of these numbers [1,9] (2): 1
 ? Do you want to output a data file with the optical properties of the dust mix? [yes/no] (yes):
 ? Do you want to output a data file with the mean optical properties of the dust mix? [yes/no] (yes):
\endverbatim

SKIRT supports a set of built-in dust mixtures describing the optical properties of the dust.
Several dust populations, each with their own chemical composition and size distribution, can live together in the
model. All dust populations have the same spatial distribution, but they may have different optical
properties and therefore they will reach different equilibrium temperatures.

For this tutorial, select the default Draine & Li dust mix.
This dust mixture formally consists of a single dust grain population, but effectively
represents a mixture of graphite, silicate and PAH dust grains that reproduces the extinction curve of the Milky Way.

\verbatim
   Possible choices for the dust grid structure:
      1. A 3D cartesian grid structure with a linear distribution
      2. A 3D cartesian grid structure with a power-law distribution
      3. A 3D dust grid structure with a two-phase medium
      4. An octtree dust grid structure
      5. A k-d tree (binary tree) dust grid structure
      6. A tree dust grid structure derived from a set of particles
      7. A Voronoi dust grid structure
 ? Enter one of these numbers [1,7] (4): 4
 ? Do you want to output data files for plotting the structure of the grid? [yes/no] (yes):
 ? Enter the outer radius of the root cell in the x direction [0 pc,.. pc]: 20 kpc
 ? Enter the outer radius of the root cell in the y direction [0 pc,.. pc]: 20 kpc
 ? Enter the outer radius of the root cell in the z direction [0 pc,.. pc]: 20 kpc
 ? Enter the minimum level of grid refinement (typically 2 to 3) [0,50] (2): 2
 ? Enter the maximum level of grid refinement (typically 6 to 10) [2,50] (6): 7
   Possible choices for the search method used for traversing the tree grid:
      1. Top-down (start at root and recursively find appropriate child node)
      2. Neighbor (construct and use neighbor list for each node wall)
      3. Bookkeeping (derive appropriate neighbor through node indices)
 ? Enter one of these numbers [1,3] (2):
 ? Enter the number of random density samples for determining cell subdivision [10,1000] (100):
 ? Enter the maximum mean optical depth for each dust cell [0,100] (0):
 ? Enter the maximum fraction of dust mass contained in each dust cell [0,0.01] (1e-6): 5e-5
 ? Enter the maximum density dispersion fraction in each dust cell [0,0.01] (0):
 ? Do you want to use barycentric subdivision? [yes/no] (no):
\endverbatim

Usually you have little a priori knowledge about a dust distribution imported from SPH simulation results.
Due to the lack of spatial symmetries, the grid structure that discretizes the dust must be a full 3D grid.
Moreover, since we have no a priori information on where the denser regions are located, it is best to choose
an adaptive grid that automatically forms smaller cells in denser regions. The grid will take longer to construct,
but the simulation run will be faster and more accurate than if you would use a more uniform grid.

For this tutorial simulation, select an octtree grid. The grid must enclose most of the dust
in the system so its size must be adjusted to the configuration space of the input data.
For the \c eagle_xxx.dat particle data files, you should specify an extent of 20 kpc in each direction.

For a first simulation, typical values for the grid refinement level are a minimum of 2 and a maximum of 7.
For high-quality simulations, you will need to raise the maximum level to 10 or more, so that
the resulting octtree contains more and smaller cells. Of course this strongly raises execution time.

For this tutorial simulation, the maximum fraction of dust mass in each cell may be set to a value of
\f$5\times 10^{-5}\f$. For high-quality simulations, this parameter is usually left to the default value
of \f$10^{-6}\f$. Larger (and thus less stringent) values for this parameter result in an octtree with less cells,
which lowers accuracy as well as execution time.

Leave the other parameters to their default values.

\verbatim
 ? Enter the number of random density samples for determining cell mass [10,1000] (100):
 ? Do you want to output a data file with convergence checks on the dust system? [yes/no] (yes):
 ? Do you want to output FITS files displaying the dust density distribution? [yes/no] (yes):
 ? Do you want to calculate and output quality metrics for the dust grid? [yes/no] (no):
 ? Do you want to output a data file with relevant properties for all dust cells? [yes/no] (no):
 ? Do you want to output statistics on the number of cells crossed per path? [yes/no] (no):
   Possible choices for the dust emissivity type:
      1. Modified blackbody dust emissivity (assumes LTE conditions)
      2. Transient heating dust emissivity (with full non-LTE treatment)
      3. Transient heating dust emissivity using the external DustEM code
 ? Enter one of these numbers or zero to select none [0,3] (1):
   Possible choices for the dust library mechanism:
      1. A dust library that calculates the emissivity for every dust cell
      2. A dust library with a one-dimensional grid of emissivity entries
      3. A dust library with a two-dimensional grid of emissivity entries
 ? Enter one of these numbers [1,3] (1):
 ? Do you want to include dust self-absorption? [yes/no] (yes): no
 ? Do you want to output a file with the dust mix emissivities in the local ISRF? [yes/no] (no):
 ? Do you want to output FITS files displaying the dust temperature distribution? [yes/no] (yes):
 ? Do you want to output a data file describing the interstellar radiation field? [yes/no] (yes):
\endverbatim

As soon as a simulation includes a dust system, dust absorption and scattering are automatically enabled.
For a panchromatic simulation you can also enable thermal emission by the dust. To enable thermal emission,
select one of the dust emissivity options (see next paragraph). To disable thermal emission, enter zero to
select "no dust emissivity".
If the simulation's wavelength range includes MIR or FIR bands, dust emission is most likely relevant.
If the simulation covers UV and optical bands only, dust emission is most likely irrelevant.

With the default "modified blackbody" dust emissivity option, thermal emission is calculated under the assumption
of local thermal equilibrium (LTE). Alternatively you can select "transient heating" dust emissivity, which supports
non-LTE (NLTE) dust emission by transiently heated small grains.
This is a lot more resource-intensive but produces more realistic results for the NIR and MIR wavelengths.
When a dust grid contains many cells, it may not be feasible to calculate the NLTE dust emission for the exact
radiation field in each and every dust cell (since the calculation is so resource-intensive). To help address
this issue, <tt>SKIRT</tt> offers a library mechanism that selects a small set of radiation fields relevant to the range
detected in the dust grid, performs the thermal emission calculation for each of these library entries, and then
maps each dust grid cell to one of these entries. There are versions of the library mechanism with a 1D and a 2D grid.
The default mechanism simply calculates the thermal emission for every cell, so it is not really a library.

Finally, if dust emission is enabled, you can also enable dust self-absorption, implying a self-consistent calculation
of the dust temperature through an iterative (and time-consuming) procedure.
The relevance of dust self-absorption depends on the optical depth of the modeled system: if there is a
modest amount of dust, the system is transparent to long-wavelength radiation, so self-absorption by dust is
negligible. If the system is rather opaque, it will absorb also mid- and far-infrared
radiation, so self-absorption might be important.

For this tutorial simulation, use the default "modified blackbody" dust emissivity and the default "for every dust
cell" library mechanism (since the LTE calculation is very fast, you can just as well do it for every cell).
However it is best to disable dust self-absorption since it has no effect for this optically-thin model.
Leave the other parameters to their default values.

\subsection UserTut2Run Running the simulation

After all questions have been answered, <tt>SKIRT</tt> writes out the resulting ski file and terminates.
Start <tt>SKIRT</tt> again, this time specifying the name of new ski file on the command line, to actually perform
the simulation.

\subsection UserTut2Output Output files

Most of the output files for this tutorial simulation have already been described for the previous tutorial.
A notable exception is the file written by the SED instrument:
 - \c PanSPH_i90_sed.dat is a short text data file representing the spectral energy distribution of the photon
    packages detected by the instrument; there are two columns (wavelength, flux) that can easily be plotted.

The output files describing sections of the dust with the coordinate planes now come in triples
(\c xy, \c xz and \c yz) because there are no symmetries (i.e. the dust grid is fully 3D).
There are also some additional files describing aspects of the dust system that make sense only for
panchromatic simulations:
 - \c PanSPH_ds_tempxy.fits, \c xz & \c yz ("temperature") are single-frame FITS data files,
   each providing a 1024 x 1024 pixel map of the mean dust temperature in a coordinate plane, across
   the total extension of the dust grid.
 - \c PanSPH_ds_isrf.dat ("interstellar radiation field") is a text format data file describing the
   radiation field (flux for every wavelength) for each dust cell in the dust grid.

If you enable NLTE dust emission, there will be one or more files with names of the form
\c PanSPH_*_EXT.RES and \c PanSPH_*_ISRF.DAT, where * stands for a decimal number. These are temporary files
and can be discarded.


\section UserTut3 Tutorial 3: Scattering from dust in a Kelvin-Helmholtz instability

\image html TutorialScatAMR.png
\image latex TutorialScatAMR.png

In this tutorial you will use <tt>SKIRT</tt> to study the dust in a Kelvin-Helmholtz instability as it might occur in
a molecular cloud. The dust distribution has been generated by a hydrodynamical simulation on an adaptive mesh
(AMR = Adaptive Mesh Refinement) with the MPI-AMRVAC code developed at the K.U.Leuven
(see <a href="http://homes.esat.kuleuven.be/~keppens">http://homes.esat.kuleuven.be/~keppens</a>).
The simulation includes a gas component and two dust components with different characteristics.
The simulation results are stored as a single data file in a binary format specific to MPI-AMRVAC.
In addition to a more generic AMR import format using text columns, <tt>SKIRT</tt> can also directly import
the MPI-AMRVAC binary format.

\subsection UserTut3Pre Getting ready

Before starting this tutorial, you should have installed and/or built the <tt>SKIRT</tt> code as described in the
\ref InstallationGuide, \em and you should have completed \ref UserTut1.
A lot of information provided in the first tutorial is not repeated here!

To complete this tutorial, you need the output file produced by the MPI-AMRVAC simulation.
Download the file \c kh_amr.dat from the <tt>SKIRT</tt> downloads page
<a href="http://www.skirt.ugent.be/downloads">www.skirt.ugent.be/downloads</a>
and put it into your \c ~/SKIRT/run directory.

\subsection UserTut3Ski Creating the ski file

In a Terminal window, with an appropriate current directory, start
SKIRT without any command line arguments. <tt>SKIRT</tt> responds with a welcome
message and starts an interactive session in the terminal window,
during which it will prompt you for all the information describing
a particular simulation:

\verbatim
   Welcome to SKIRT v___
   Interactively constructing a simulation...
 ? Enter the name of the ski file to be created: ScatAMR
\endverbatim

The first question is for the filename of the ski file. For this tutorial, enter "ScatAMR".

\subsection UserTut3Sim Type of simulation

\verbatim
   Possible choices for the simulation:
      1. An oligochromatic Monte Carlo simulation
      2. A panchromatic Monte Carlo simulation
 ? Enter one of these numbers [1,2] (1): 1
\endverbatim

In an actual research setting you would probably run a panchromatic
simulation to study the absorption, scattering and thermal emission
by the dust over a range of wavelengths. In this tutorial you will
simply study scattering by the dust at a single V-band wavelength.
An oligochromatic simulation is sufficient and most performance-effective
for these purposes.

Leave the parameters related to the random generator to their default
values (not shown).

\subsection UserTut3Uni Units

\verbatim
   Possible choices for the units system:
      1. SI units
      2. Stellar units (length in AU, distance in pc)
      3. Extragalactic units (length in pc, distance in Mpc)
 ? Enter one of these numbers [1,3] (3): 2
\endverbatim

The spatial scale of the dust distribution used in this tutorial is
such that it seems best to select stellar units. While you can still
use any of the supported units to enter parameter values, this means
that all output values will be presented in stellar units.

\subsection UserTut3Inst Instrument system

\verbatim
   Possible choices for the instrument system:
      1. An instrument system
   Automatically selected the only choice: 1
   Possible choices for item #1 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
      3. A basic instrument that outputs the total flux as data cube and as SED
      4. An advanced instrument that records individual contributions to the flux
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 4
 ? Enter the name for this instrument: xy
 ? Enter the distance to the system [0 pc,.. pc]: 1
 ? Enter the inclination angle of the detector [0 deg,180 deg] (0 deg):
 ? Enter the azimuth angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the position angle of the detector [-360 deg,360 deg] (0 deg): 90
 ? Enter the number of pixels in the horizontal direction [25,10000] (250): 500
 ? Enter the maximal horizontal extent [0 AU,.. AU]: 0.0315421e18 cm
 ? Enter the number of pixels in the vertical direction [25,10000] (250): 500
 ? Enter the maximal vertical extent [0 AU,.. AU]: 0.03e18 cm
 ? Enter the number of scattering levels to be recorded individually [0,25] (0):
   Possible choices for item #2 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 0
\endverbatim

Since you want to study the scattered light separately, you need to
select the advanced instrument that records individual contributions
to the flux. Position the instrument so that it shows a projection
of the \f$xy\f$ coordinate plane (angles: \f$0,0,90\f$). This facilitates
visual comparison of the recorded fluxes with the corresponding cut
through the dust density automatically produced by SKIRT. The distance
of the instrument to the model affects all fluxes with the same factor;
use a value of your liking (for example 1 pc). Setup a pixel resolution
of your liking (for example \f$500\times500\f$ pixels) and provide a
frame extent that matches the extent of the dust distribution to be
imported. This information is not included in the AMR data file, so
it should be passed along separately.

\note A <tt>SKIRT</tt> instrument frame is a rectangle centered on the
origin and an imported AMR dust distribution is a cuboid centered
on the origin. In both cases the extent specifies half the total size
along one of the coordinate axes.

For the AMR file used in this tutorial, the dust distribution has
extent \f$(0.0315421,0.03,0.03)\f$ in units of \f$10^{18}\f$ cm. Since <tt>SKIRT</tt>
understands centimetres, there is no need for manual conversion of these
values.

Leave the number of photon packages to the default value of \f$10^{6}\f$
(not shown).

\subsection UserTut3Wave Wavelength grid

\verbatim
   Possible choices for the wavelength grid:
      1. A list of one or more distinct wavelengths
   Automatically selected the only choice: 1
 ? Enter the wavelengths [0.0001 micron,1e6 micron]: 0.55
\endverbatim

For this tutorial enter a wavelength list
containing the single value \f$\lambda=0.55\,\mu\textrm{m}\f$ (V-band).

\subsection UserTut3Stel Stellar system

\verbatim
   Possible choices for the stellar system:
      1. A stellar system
   Automatically selected the only choice: 1
   Possible choices for item #1 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
      2. A stellar component derived from an SPH output file
      3. A stellar component imported from an adaptive mesh data file
      4. A stellar component imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 1
   Possible choices for the geometry of the stellar distribution:
      1. A point source geometry
      2. A Plummer geometry
      3. A gamma geometry
         ...
 ? Enter one of these numbers [1,23] (1): 2
 ? Enter the scale length [0 AU,.. AU]: 0.03e18 cm
 ? Enter the luminosities, one for each wavelength, in solar units [0,..]: 1e-6
   Possible choices for item #2 in the stellar components list:
      1. A stellar component with a built-in geometry (in an panchromatic simulation)
         ...
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 0
\endverbatim

Since the data file provided for this tutorial has no information
on light sources, you need to provide an artificial stellar system
to illuminate the dust. The suggested option is to use a Plummer profile
with a scale length comparable to the size of the dust distribution;
this creates a fairly constant source of light across the configuration
space. Specify a total luminosity consistent with an artificial background
source, for example \f$10^{-6}\f$ solar luminosities.

\subsection UserTut3Dust Dust system

\verbatim
   Possible choices for the dust system:
      1. A dust system for use with oligochromatic simulations
 ? Enter one of these numbers or zero to select none [0,1] (1): 1
   Possible choices for the dust distribution:
      1. A dust distribution composed of various dust components
      2. A dust distribution derived from an SPH output file
      3. A dust distribution imported from an adaptive mesh data file
      4. A dust distribution imported from a Voronoi mesh data file
 ? Enter one of these numbers [1,4] (1): 3
   Possible choices for the adaptive mesh data file:
      1. An adaptive mesh data file in ASCII format
      2. An adaptive mesh data file in MPI-AMRVAC format
 ? Enter one of these numbers [1,2] (1): 2
 ? Enter the name of the adaptive mesh data file: kh_amr.dat
 ? Enter the number of mesh cells at the coarsest level, in the X direction [1,10000]: 32
 ? Enter the number of mesh cells at the coarsest level, in the Y direction [1,10000]: 128
 ? Enter the number of mesh cells at the coarsest level, in the Z direction [1,10000]: 32
 ? Enter the units for the density values [0 Msun/AU3,.. Msun/AU3]: 1e-21 g/cm3
 ? Enter the outer radius of the domain in the x direction [0 AU,.. AU]: 0.0315421e18 cm
 ? Enter the outer radius of the domain in the y direction [0 AU,.. AU]: 0.03e18 cm
 ? Enter the outer radius of the domain in the z direction [0 AU,.. AU]: 0.03e18 cm
\endverbatim

For this tutorial, select an oligochromatic dust system (the only
applicable type with an oligochromatic simulation) with a dust distribution
imported from an adaptive mesh data file.

Select the MPI-AMRVAC format and enter the appropriate filename (kh_amr.dat).
You must also provide some information that is not included in the
AMR data file: the number of mesh cells at the coarsest mesh level
in each direction; the spatial extent of the mesh in each direction;
and the units of the density values stored in the file.

For the data file used in this tutorial, the number of mesh cells
at the coarsest level is \f$(32,128,32)\f$, the dust distribution has
extent \f$(0.0315421,0.03,0.03)\f$ in units of \f$10^{18}\f$ cm, and the
density values in the file are given in units of \f$10^{-21}\,\mathrm{g}\,\mathrm{cm^{-3}}\f$.
Since <tt>SKIRT</tt> understands these units, there is no need for manual conversion.

Now you need to configure the dust components for which the data file
defines a density distribution:

\verbatim
   Possible choices for item #1 in the dust components list:
      1. An mesh dust component
   Automatically selected the only choice: 1
 ? Enter the column defining the density distribution [0,99] (0): 5
 ? Enter the column defining an extra multiplication factor, or -1 [-1,99] (-1):
 ? Enter the fraction of the density actually locked up in dust grains [0,1] (1):
   Possible choices for the dust mixture for the dust component:
      1. A Draine & Li (2007) dust mix
      2. A dust mix with average interstellar properties
         ...
 ? Enter one of these numbers [1,9] (2):
 ? Output the optical properties of the dust mix? [yes/no] (yes): no
 ? Output the mean optical properties of the dust mix? [yes/no] (yes): no

   Possible choices for item #2 in the dust components list:
      1. An mesh dust component
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 1
 ? Enter the column defining the density distribution [0,99] (0): 6
 ? Enter the column defining an extra multiplication factor, or -1 [-1,99] (-1):
 ? Enter the fraction of the density actually locked up in dust grains [0,1] (1):
   Possible choices for the dust mixture for the dust component:
      1. A Draine & Li (2007) dust mix
      2. A dust mix with average interstellar properties
      ...
 ? Enter one of these numbers [1,9] (2):
 ? Output the optical properties of the dust mix? [yes/no] (yes): no
 ? Output the mean optical properties of the dust mix? [yes/no] (yes): no

   Possible choices for item #3 in the dust components list:
      1. An mesh dust component
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 0
\endverbatim

The file contains two dust density distributions given respectively
by the variables (or columns) with index 5 and 6. There is no extra
multiplication factor or fraction, so you can leave these parameters
to their default value. The dust mix (which defines the characteristics
of the dust grains) is automatically selected since for an oligochromatic
simulation there is only one choice. For a panchromatic simulation
you would be able to specify different characteristics for each dust
component.

\verbatim
   Possible choices for the dust grid structure:
      1. A 3D cartesian grid structure with a linear distribution
      2. A 3D cartesian grid structure with a power-law distribution
      3. A 3D dust grid structure with a two-phase medium
      4. An octtree dust grid structure
      5. A k-d tree (binary tree) dust grid structure
      6. A tree dust grid structure derived from a set of particles
      7. A Voronoi dust grid structure
      8. A dust grid structure based on the adaptive mesh dust geometry
 ? Enter one of these numbers [1,8] (4): 8
\endverbatim

SKIRT discretizes the dust on a grid structure, i.e. a collection
of small cells in which properties such as dust density and temperature
are considered to be uniform. You could select any of the 3D dust
grids offered by SKIRT. The octtree grid for example builds a grid
adapted to the dust density distribution based on some given parameters.
When importing a dust distribution from an adaptive mesh data file,
SKIRT also offers the option to directly use the adaptive mesh (defined
by the data file) as a dust grid. The dust grid then exactly mirrors
the resolution structure of the hydrodynamical simulation, which seems
a natural thing to do. On the other hand, in some cases building a
new grid (perhaps with less cells) may prove meaningful to reduce
the runtime of the <tt>SKIRT</tt> simulation.

For this tutorial select the option to use the imported adaptive mesh
as a dust grid.

Finally the dust system takes a few additional parameters which can
be left to their default value (not shown).

\subsection UserTut3Run Running the simulation

After all questions have been answered, <tt>SKIRT</tt> writes out the resulting
ski file and terminates. Start <tt>SKIRT</tt> again, this time specifying the
name of the new \em ski file on the command line, to actually perform the
simulation.

\subsection UserTut3Output Output files

Most of the output files have already been described for one of the
previous tutorials. The instrument used in this tutorial does produce
some additional files to record individual flux components:

 - \c ScatAMR_total.fits contains the total flux detected by the instrument
   (i.e. the sum of the direct, scattered and dust flux).
 - \c ScatAMR_direct.fits contains the flux resulting from stellar photon packages
   that directly reach the instrument without being scattered.
 - \c ScatAMR_scattered.fits contains the flux resulting from stellar photon
   packages that were scattered by the dust before reaching the instrument.
 - \c ScatAMR_dust.fits contains the flux resulting from photon packages that
   were emitted by the dust; for oligochromatic simulations (no thermal
   dust emission) this flux component is zero.
 - \c ScatAMR_transparent.fits contains the total flux that would be detected
   by the instrument if there were no dust in the system.

\subsection UserTut3Verif Verifying results

The file \c ScatAMR_ds_trhoxy.fits shows a cut through the total dust
density along the \f$xy\f$ coordinate plane. It should resemble the left
panel of the illustration at the beginning of this tutorial.

The file \c ScatAMR_xy_scattered.fits shows the flux resulting from
photon packages that were scattered by the dust (i.e. excluding any
photon packages that reach the instrument without being scattered).
It should resemble the right panel of the illustration at the beginning
of this tutorial.

*/
